// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DIRECT_URL")
}

enum Status {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  SKIPPED
}

model Summary {
  id          String    @id @default(cuid())
  url         String?   @unique
  title       String?
  type        String?
  rawContent  String    @db.Text
  summary     String?   @db.Text
  keyPoints   String[]  @default([])
  tags        String[]  @default([])
  metadata    Json?
  status      Status    @default(PENDING)
  error       String?   @db.Text
  createdAt   DateTime  @default(now())
  processedAt DateTime?
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([createdAt])
  @@index([userId])
}

model User {
  id             String          @id @default(cuid())
  email          String          @unique
  name           String?
  picture        String?
  lastLogin      DateTime        @default(now())
  preferences    UserPreferences?
  slackWorkspace SlackWorkspace?
  summaries      Summary[]

  @@index([email])
}

model UserPreferences {
  id                 String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  contentTypes      String[]
  automationEnabled Boolean  @default(false)
  automationFrequency Int    @default(1)
  quietHours       Json?    // Store as { enabled: boolean, start: number, end: number }

  @@index([userId])
}

model SlackWorkspace {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken String
  teamId      String
  teamName    String
  webhookUrl  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([teamId])
  @@index([userId])
}